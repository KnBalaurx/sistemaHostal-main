# Generated by Django 3.2 on 2024-11-25 20:25

import django.core.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    dependencies = [
        ('gestion', '0003_remove_reserva_numero_habitacion'),
    ]

    operations = [
        migrations.RenameField(
            model_name='reserva',
            old_name='fecha',
            new_name='fecha_registro',
        ),
        migrations.AddField(
            model_name='reserva',
            name='fecha_ingreso',
            field=models.DateTimeField(blank=True, default=django.utils.timezone.now),
        ),
        migrations.AlterField(
            model_name='cliente',
            name='apellido',
            field=models.CharField(max_length=50, validators=[django.core.validators.RegexValidator(message='El apellido solo puede contener letras y espacios.', regex='^[a-zA-ZáéíóúÁÉÍÓÚñÑ\\s]+$')]),
        ),
        migrations.AlterField(
            model_name='cliente',
            name='correo',
            field=models.EmailField(max_length=100, validators=[django.core.validators.EmailValidator(message='Debe ingresar un correo válido.')]),
        ),
        migrations.AlterField(
            model_name='cliente',
            name='nombre',
            field=models.CharField(max_length=50, validators=[django.core.validators.RegexValidator(message='El nombre solo puede contener letras y espacios.', regex='^[a-zA-ZáéíóúÁÉÍÓÚñÑ\\s]+$')]),
        ),
        migrations.AlterField(
            model_name='cliente',
            name='rut',
            field=models.CharField(max_length=12, unique=True, validators=[django.core.validators.RegexValidator(message='El RUT debe estar en el formato 12345678-9.', regex='^\\d{7,8}-[0-9kK]$')]),
        ),
        migrations.AlterField(
            model_name='cliente',
            name='telefono',
            field=models.CharField(help_text="Debe ingresar un número con el formato '+56912345678'.", max_length=12, validators=[django.core.validators.RegexValidator(message="El número de teléfono debe estar en el formato '+56912345678'.", regex='^\\+569\\d{8}$')]),
        ),
        migrations.AlterField(
            model_name='habitacion',
            name='estado',
            field=models.CharField(choices=[('disponible', 'Disponible'), ('reservada', 'Reservada'), ('mantenimiento', 'En Mantenimiento'), ('en uso', 'En Uso')], default='disponible', max_length=15),
        ),
        migrations.AlterField(
            model_name='habitacion',
            name='precio',
            field=models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0.0, message='El precio debe ser un valor positivo.')]),
        ),
        migrations.AlterField(
            model_name='reserva',
            name='estado',
            field=models.CharField(choices=[('pendiente', 'Pendiente'), ('pagada', 'Pagada'), ('cancelada', 'Cancelada')], default='pendiente', max_length=15),
        ),
        migrations.AlterField(
            model_name='reserva',
            name='noches',
            field=models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1, message='Debe haber al menos una noche en la reserva.')]),
        ),
        migrations.AlterField(
            model_name='trabajador',
            name='apellido',
            field=models.CharField(max_length=50, validators=[django.core.validators.RegexValidator(message='El apellido solo puede contener letras y espacios.', regex='^[a-zA-ZáéíóúÁÉÍÓÚñÑ\\s]+$')]),
        ),
        migrations.AlterField(
            model_name='trabajador',
            name='nombre',
            field=models.CharField(max_length=50, validators=[django.core.validators.RegexValidator(message='El nombre solo puede contener letras y espacios.', regex='^[a-zA-ZáéíóúÁÉÍÓÚñÑ\\s]+$')]),
        ),
        migrations.AlterField(
            model_name='trabajador',
            name='rut',
            field=models.CharField(max_length=12, unique=True, validators=[django.core.validators.RegexValidator(message='El RUT debe estar en el formato 1234567-9.', regex='^\\d{7,8}-[0-9kK]$')]),
        ),
    ]
